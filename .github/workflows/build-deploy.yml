name: build and deploy code

on: [push, pull_request]

jobs:
  build:
    environment:
      name: testing

    env:
      DATABASE_HOSTNAME: localhost
      DATABASE_PORT: 5432
      DATABASE_PASSWORD: ${{ secrets.DATABASE_PASSWORD }}
      DATABASE_NAME: ${{ secrets.DATABASE_NAME }}
      DATABASE_USERNAME: ${{ secrets.DATABASE_USERNAME }}
      secret_key: ${{ secrets.secret_key }}
      ALGORITHM: ${{ secrets.ALGORITHM }}
      ACCESS_TOKEN_EXPIRE_MINUTES: ${{ secrets.ACCESS_TOKEN_EXPIRE_MINUTES }}

    services:
      postgres:
        image: postgres
        env:
          POSTGRES_USER: ${{ secrets.DATABASE_USERNAME }}
          POSTGRES_PASSWORD: ${{ secrets.DATABASE_PASSWORD }}
          POSTGRES_DB: ${{ secrets.DATABASE_NAME }}_test 
        ports:
          - 5432:5432
        options: >-
          --health-cmd "pg_isready"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5

    runs-on: ubuntu-latest

    steps:
      - name: Pull git repo
        uses: actions/checkout@v2

      - name: Install Python 3.9
        uses: actions/setup-python@v2
        with:
          python-version: "3.9"

      - name: Upgrade pip
        run: python -m pip install --upgrade pip

      - name: Install dependencies
        run: pip install -r requirements.txt

      - name: Debug database info
        run: |
          echo "Database Host: $DATABASE_HOSTNAME"
          echo "Database Name: $DATABASE_NAME"
          echo "Database Port: $DATABASE_PORT"

      - name: Wait for Postgres to be ready
        run: |
          echo "⏳ Waiting for Postgres to be ready..."
          until pg_isready -h localhost -p 5432 -U $DATABASE_USERNAME; do
            sleep 2
          done
          echo "✅ Postgres is readyy!"

      - name: Run tests with pytest
        run: |
          pip install pytest
          pytest -s -vv

      # - name: Set up Docker Buildx
      #   uses: docker/setup-buildx-action@v3

      # - name: Log in to Docker Hub
      #   uses: docker/login-action@v3
      #   with:
      #     username: ${{ secrets.DOCKER_HUB_USERNAME }}
      #     password: ${{ secrets.DOCKER_HUB_ACCESS_TOKEN }}

      # - name: Build and push Docker image
      #   id: build
      #   uses: docker/build-push-action@v5
      #   with:
      #     context: .
      #     file: ./Dockerfile
      #     push: true
      #     tags: ${{ secrets.DOCKER_HUB_USERNAME }}/fastapi-app:latest
      #     cache-from: type=registry,ref=${{ secrets.DOCKER_HUB_USERNAME }}/fastapi-app:buildcache
      #     cache-to: type=registry,ref=${{ secrets.DOCKER_HUB_USERNAME }}/fastapi-app:buildcache,mode=max

      # - name: Show image digest
      #   run: echo "Image digest is ${{ steps.build.outputs.digest }}"

  deploy:
    runs-on: ubuntu-latest
    needs: [build]
    environment:
      name: production
    
    steps:
      - name: pulling git repo
        uses: actions/checkout@v2
        
      - name: Deploy via SSH
        uses: appleboy/ssh-action@master
        with:
          host: ${{ secrets.PROD_HOST }}
          username: ${{ secrets.PROD_USERNAME }}
          key: ${{ secrets.SSH_PRIVATE_KEY }}
          port: 22
          script: |
            cd app/src
            git pull
            systemctl restart fastapi.service

    
